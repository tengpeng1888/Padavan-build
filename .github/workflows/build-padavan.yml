name: Build Padavan Firmware

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'
  watch:
    types: [started]

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    strategy:
      matrix:
        model: [ "MZJISU", "PSG1218", "K1", "MT7620", "MT7628" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get -y install unzip libtool-bin curl cmake gperf gawk flex bison nano xxd fakeroot \
          cpio git python3-docutils gettext automake autopoint texinfo build-essential help2man \
          pkg-config zlib1g-dev libgmp3-dev libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev wget

      - name: Clone source code
        env:
          KERNEL: 3.4
        run: |
          if [ $KERNEL = "4.4" ] ; then
            git clone --depth=1 https://github.com/tengpeng1888/padavan-4.4.git /opt/rt-n56u
          else
            git clone --depth=1 https://github.com/tengpeng1888/rt-n56u.git /opt/rt-n56u
          fi
          cd /opt/rt-n56u/toolchain-mipsel
          sh dl_toolchain.sh
          mkdir -p /opt/images/

      - name: Build Firmware
        env:
          TNAME: ${{ matrix.model }}
          KERNEL: 3.4
        run: |
          cd /opt/rt-n56u/trunk
          if [ ! -f configs/templates/$TNAME.config ] ; then
            echo "configs/templates/$TNAME.config not found "
            exit 1
          fi
          cp -f configs/templates/$TNAME.config .config
          sed -i 's/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=n/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y/g' .config
          sudo ./clear_tree
          sudo ./build_firmware_modify $TNAME 0
          # 生成时间戳（例如 20250220）
          TIMESTAMP=$(date +%Y%m%d)
          # 重命名 .trx 文件（例如 20250220_PSG1218.trx）
          sudo mv images/*.trx /opt/images/${TIMESTAMP}_$TNAME.trx

      - name: Create output directory
        run: |
          OUTPUT_DIR="/opt/firmware-output"
          mkdir -p $OUTPUT_DIR

      - name: Copy all .trx files to output directory
        run: |
          OUTPUT_DIR="/opt/firmware-output"
          TIMESTAMP=$(date +%Y%m%d)
          # 复制所有带时间戳的 .trx 文件
          cp /opt/images/${TIMESTAMP}_*.trx $OUTPUT_DIR/
          # 验证文件是否复制成功
          ls -l $OUTPUT_DIR

      - name: Package all .trx files into a single ZIP
        id: package
        run: |
          OUTPUT_DIR="/opt/firmware-output"
          TIMESTAMP=$(date +%Y%m%d)
          ZIP_NAME="padavan-all-models-${TIMESTAMP}.zip"
          cd $OUTPUT_DIR
          # 打包所有 .trx 文件
          zip -j $ZIP_NAME *.trx
          echo "ZIP_PATH=$OUTPUT_DIR/$ZIP_NAME" >> $GITHUB_OUTPUT
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_OUTPUT
          # 验证 ZIP 内容
          unzip -l $ZIP_NAME

      - name: Upload single ZIP package
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.ZIP_NAME }}
name: Build Padavan Firmware

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'
  watch:
    types: [started]

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    strategy:
      matrix:
        model: [ "MZJISU", "PSG1218", "K1", "MT7620", "MT7628" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get -y install unzip libtool-bin curl cmake gperf gawk flex bison nano xxd fakeroot \
          cpio git python3-docutils gettext automake autopoint texinfo build-essential help2man \
          pkg-config zlib1g-dev libgmp3-dev libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev wget

      - name: Clone source code
        env:
          KERNEL: 3.4
        run: |
          if [ $KERNEL = "4.4" ] ; then
            git clone --depth=1 https://github.com/tengpeng1888/padavan-4.4.git /opt/rt-n56u
          else
            git clone --depth=1 https://github.com/tengpeng1888/rt-n56u.git /opt/rt-n56u
          fi
          cd /opt/rt-n56u/toolchain-mipsel
          sh dl_toolchain.sh
          mkdir -p /opt/images/

      - name: Build Firmware
        env:
          TNAME: ${{ matrix.model }}
          KERNEL: 3.4
        run: |
          cd /opt/rt-n56u/trunk
          if [ ! -f configs/templates/$TNAME.config ] ; then
            echo "configs/templates/$TNAME.config not found "
            exit 1
          fi
          cp -f configs/templates/$TNAME.config .config
          sed -i 's/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=n/CONFIG_FIRMWARE_INCLUDE_OPENSSL_EXE=y/g' .config
          sudo ./clear_tree
          sudo ./build_firmware_modify $TNAME 0
          # 生成时间戳（例如 20250220）
          TIMESTAMP=$(date +%Y%m%d)
          # 重命名 .trx 文件（例如 20250220_PSG1218.trx）
          sudo mv images/*.trx /opt/images/${TIMESTAMP}_$TNAME.trx

      - name: Create output directory
        run: |
          OUTPUT_DIR="/opt/firmware-output/${{ matrix.model }}"
          mkdir -p $OUTPUT_DIR

      - name: Copy .trx files to output directory
        run: |
          OUTPUT_DIR="/opt/firmware-output/${{ matrix.model }}"
          TIMESTAMP=$(date +%Y%m%d)
          # 复制带有时间戳的 .trx 文件
          cp /opt/images/${TIMESTAMP}_*.trx $OUTPUT_DIR/
          # 验证文件是否复制成功
          ls -l $OUTPUT_DIR

      - name: Package .trx files into ZIP
        id: package
        run: |
          OUTPUT_DIR="/opt/firmware-output/${{ matrix.model }}"
          TIMESTAMP=$(date +%Y%m%d)
          ZIP_NAME="padavan-${{ matrix.model }}-${TIMESTAMP}.zip"
          cd $OUTPUT_DIR
          # 只打包当前型号的 .trx 文件（例如 20250220_PSG1218.trx）
          zip -j $ZIP_NAME *.trx
          echo "ZIP_PATH=$OUTPUT_DIR/$ZIP_NAME" >> $GITHUB_OUTPUT
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_OUTPUT
          # 验证 ZIP 内容
          unzip -l $ZIP_NAME

      - name: Upload packages
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.ZIP_NAME }}
          path: /opt/images
